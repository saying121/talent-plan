syntax = "proto3";

package raftpb;

message RequestVoteArgs {
    // Your data here (2A, 2B).
    uint64 term = 1; // 领导者的任期号
    uint64 candidate_id = 2; // 索要投票的候选者Id
    uint64 last_log_term  = 3; // 候选者最新一条日志记录索引值(5.4节)
    uint64 last_log_index = 4; // 候选者最新一条日志记录的任期号(5.4节)
}

message RequestVoteReply {
    // Your data here (2A).
    uint64 term = 1; // 当前任期号，为了让候选者更新任期值
    bool vote_granted = 2; // 当投给此候选者时返回true
}
message AppendEntriesArgs {
    uint64 term = 1; // 领导者的任期号
    uint64 prev_log_index = 2; // 之前处理的日志索引值
    uint64 prev_log_term = 3; // prevLogIndex日志的任期号
    repeated LogEntry entries = 4; // 需要保存的日志条目(心跳包时为空，为了提交效率，可包含多条日志条目)
    uint64 leader_commit = 5; // 领导者已经提交的日志索引值
    uint64 leader_id = 6;	// 领导者的id，跟随者可以重定向客户端请求到这个id的地址上
}

message LogEntry {
    bytes data = 1;
    uint64 term = 2;
}
// 接收者实现
// 1. 如果term < curentTerm(5.1节)返回false
// 2. 如果日志中不包含prevLogIndex的日志，或者prevLogTerm不匹配，刚返回false(5.3节)
// 3. 如果与已经存在的日志条目冲突(相同的日志索引，但是任期不一样)，则删除此条目以及之后的所有条目(5.3节)
// 4. 将不在日志里的记录追加入日志中
// 5. 如果leaderCommit > commitIndex，则设置commitIndex为leaderCommit和最新条目索引这两个中较小的一个
message AppendEntriesReply {
    uint64 term = 1; // 当前任期号，为了让领导者更新任期号值
    bool success = 2; // 如果跟随者包含有匹配的prevLogIndex和prevLogTerm，则返回true
    uint64 conflicting_term = 3;
    uint64 first_conflicted = 4;
}

message InstallSnapshotArgs {
    uint64 term = 1;

    uint64 last_included_term  = 2; // lastIncludeIndex索引下的日志的任期号
    uint64 last_included_index = 3; // 快照包含的最后一条索引，所以快照会替换掉此条索引之前的所有日志记录，包括这条索引所指向的日志

    bytes data = 4;
}

message InstallSnapshotReply {
    uint64 term = 1;
}
